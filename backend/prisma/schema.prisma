// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  firstName String?
  lastName  String?
  email     String   @unique
  password  String
  role      Role
  vendor    Vendor?
  admin     Admin?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Role {
  vendor
  admin
  superAdmin
}

model Vendor {
  vendorId     String        @id @default(cuid())
  userId       String        @unique
  buisnessName String
  address      String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  stalls       Stall[]
  applications Application[]
}

model Admin {
  adminId     String @id @default(cuid())
  userId      String @unique
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  designation String
}

model Application {
  applicationId String             @id @default(cuid())
  vendorId      String
  title         String
  description   String
  location      String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  status        Status             @default(pending)
  vendor        Vendor             @relation(fields: [vendorId], references: [vendorId], onDelete: Cascade)
  permission    Permission?
  images        ApplicationImage[]

  @@index([vendorId])
}

model ApplicationImage {
  imageId       String      @id @default(cuid())
  applicationId String
  imageUrl      String
  application   Application @relation(fields: [applicationId], references: [applicationId])
  createdAt     DateTime    @default(now())

  @@index([applicationId])
}

enum Status {
  pending
  approved
  rejected
}

model Permission {
  permissionId  String      @id @default(cuid())
  applicationId String      @unique
  location      String
  fee           Float
  validUntil    String
  application   Application @relation(fields: [applicationId], references: [applicationId])

  @@index([applicationId])
}

model Stall {
  stallId    String  @id @default(cuid())
  name       String
  vendorId   String
  location   String
  size       String
  pictureUrl String?
  vendor     Vendor  @relation(fields: [vendorId], references: [vendorId], onDelete: Cascade)

  @@index([vendorId])
}
